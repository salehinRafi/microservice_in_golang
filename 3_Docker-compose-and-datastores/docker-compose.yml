# Problem of docker in tutorial-part-2 :-
#   i. Which let us run our services in light-weight containers with their own run-times and dependencies.
#   ii. However, it's getting slightly cumbersome to have to run and manage each service with a separate Makefile.
# Thus, Docker-compose allows you do define a list of docker containers in a yaml file, and specify metadata about their run-time.

version: '3.1'

services:

  consignment-client:
    build: ./consignment-client
    environment:
      MICRO_REGISTRY: "mdns"

  consignment-service:
    build: ./consignment-service
    ports:
      - 50051:50051
    environment:
      MICRO_ADDRESS: ":50051"
      MICRO_REGISTRY: "mdns"
      DB_HOST: "datastore:27017"

  vessel-service:
    build: ./vessel-service
    ports:
      - 50052:50051
    environment:
      MICRO_ADDRESS: ":50051"
      MICRO_REGISTRY: "mdns"
      DB_HOST: "datastore:27017"

  user-service:
    build: ./user-service
    ports:
      - 50053:50051
    environment:
      MICRO_ADDRESS: ":50051"
      MICRO_REGISTRY: "mdns"
      DB_NAME: "postgres"
      DB_HOST: "database"
      DB_PORT: "5432"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"

  user-client:
    build: ./user-client
    environment:
      MICRO_REGISTRY: "mdns"


  datastore:
    image: mongo
    ports:
      - 27017:27017

  database:
    image: postgres
    ports:
      - 5432:5432

# What happen here?
# i. define the version of docker-compose we want to use
# ii. define the list of service.
#     - each service is defined by its name.
#     - include a build path, which is a reference to a location, which should contain a Dockerfile. This tells docker-compose          to use this Dockerfile to build its image.
#     - define port mappings
#     - define environment variables.